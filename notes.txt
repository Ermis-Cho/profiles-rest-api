Technologies used:

Development Server
    Vagrant
    Oracle Virtualbox
Application Code: 
    Python
    Django (Web framework for Python)
    Django REST framework (Provides set of features for making standard REST APIs)
Tools:
    git
    Atom (maybe will still use VS code)
    Chrome extension - Mod header (Easily modify HTTP headers)


Source code on Github:
    https://github.com/LondonAppDev/profiles-rest-api

How to ask questions on stack overflow:
    https://londonappdeveloper.com/how-to-ask-questions-on-stack-overflow-and-get-answers/

Sources for downloading the required tools:
    vagrant (didn't work)
        https://www.vagrantup.com/
    Vagrant (did work)
        https://www.vagrantup.com/Downloads
    ModHeader
        https://chrome.google.com/webstore/detail/modheader-modify-http-hea/idgpnmonknjnojddfkpgkljpfnnfcklj?hl=en
    Atom
        https://github.blog/2022-06-08-sunsetting-atom/
    Git
        https://git-scm.com/
    Cheatsheet
        https://github.com/LondonAppDev/build-a-backend-api-python-drf-beginner-cheat-sheet/blob/master/README.md
    Virtualbox 6.1
        https://www.virtualbox.org/wiki/Download_Old_Builds_6_1

Gitignore source:
    https://gist.github.com/LondonAppDev/dd166e24f69db4404102161df02a63ff

Markwdown-Cheatsheet
    https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet

MIT License:
    https://choosealicense.com/licenses/mit/

#How to push your local git commit to github

#Create ssh key if it doesn't exist
$ ls ~/.ssh
$ ssh-keygen -t rsa -b 4096 -C "ermis.chorinopoulos@gmail.com"

#Create a vagrant file for ubuntu
$ vagrant init ubuntu/bionic64

Paste the vagrant file from the course
    https://gist.github.com/LondonAppDev/199eef145a21587ea866b69d40d28682

#How to start a vagrant instance
    #Go to the directory with the vagrant file
    vagrant up

#How to connect to the machine you created
    vagrant ssh

All of the files in the project are synchronized (2 ways) with the vagrant instance unter the directory "/vagrant"

# How to push all local changes to the remote branch
    git push origin

# How to create a Python virtual environment
    python -m venv ~/env
    # How to activate it (in cli)
    source ~/env/bin/activate

    # How to deactivate it (in cli)
    deactivate

# How to install requirements from requirements.txt
Note: Virtual environment must be activated
    pip install -r requirements.txt

#Django Management Commands
    # Create new Django project
        django-admin.py startproject profiles_project  .
    # Create new Django app
        python manage.py startapp profiles_api

    # How to start Django development server
        python manage.py runserver 0.0.0.0:8000

Django models:
    https://docs.djangoproject.com/en/1.11/topics/db/models/
Django model fields:
    https://docs.djangoproject.com/en/1.11/ref/models/fields/
Django handling auth:
    https://docs.djangoproject.com/en/1.11/topics/auth/customizing/#auth-custom-user

PEP 8 Guidelines:
    https://peps.python.org/pep-0008/

Django (like Ansible) saves the instructions to create a table based on the created models
using files called migrations
in cli:
cd /vagrant
source ~env/bin/activate
python manage.py makemigrations <name_of_the_app_to_make_migrations>
e.g. (env) vagrant@ubuntu-bionic:/vagrant$ python manage.py makemigrations profiles_api

# How to make migrations/set up a database
(env) vagrant@ubuntu-bionic:/vagrant$ python manage.py migrate

#How to create a is_super_user:
    cd /vagrant
    source ~env/bin/activate
    python manage.py create_superuser

# Django admin url:
    <link>:<port>/admin


# How to convert a user a user into a superuser
    # From Django shell:
        python manage.py shell
    # Run this:
        from django.contrib.auth import get_user_model
        User = get_user_model()
        user = User.objects.get(username="<username>")
        user.is_staff = True
        user.is_admin = True
        user.is_superuser = True
        user.save()

# API view: describe logic to make API endpoint
    Uses standard HTTP methods for functions
    Gives most control over the logic:
        Perfect for implementing complex logic
        Calling other APIs
        Working with local files